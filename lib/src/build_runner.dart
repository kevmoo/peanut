import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:glob/glob.dart';
import 'package:io/ansi.dart' as ansi;
import 'package:path/path.dart' as p;

import 'options.dart';
import 'utils.dart';

Future<void> runBuildRunner(
  String pkgDirectory,
  Map<String, String> targets,
  Options options,
) async {
  final targetsValue =
      targets.entries.map((e) => '${e.key}:${e.value}').join(',');

  final args = [
    'run',
    'build_runner',
    'build',
    options.release ? '--release' : '--no-release',
  ];

  if (options.buildConfig != null) {
    args.addAll(['--config', options.buildConfig]);
  }

  if (options.builderOptions != null) {
    for (var option in options.builderOptions.entries) {
      for (var optionEntry in option.value.entries) {
        // --define=build_web_compilers:entrypoint=dart2js_args="[-O4]"
        final argValue =
            '${option.key}=${optionEntry.key}=${jsonEncode(optionEntry.value)}';
        args.addAll([
          '--define',
          argValue,
        ]);
      }
    }
  }

  args.addAll([
    '--output',
    targetsValue,
  ]);

  print(ansi.styleBold.wrap('''
Command:     ${['pub'].followedBy(args).join(' ')}
'''));

  await runProcess(pubPath, args, workingDirectory: pkgDirectory);

  var deleteCount = 0;

  for (var buildDir in targets.values) {
    for (var file in Directory(buildDir)
        .listSync(recursive: true, followLinks: false)
        .whereType<File>()) {
      final relativePath = p.relative(file.path, from: buildDir);

      if (_badFileGlob.matches(relativePath)) {
        if (deleteCount == 0) {
          print('');
          stdout.write(
            ansi.styleBold.wrap('Deleting extra files from output directory'),
          );
        }
        stdout.write('.');
        file.deleteSync();
        deleteCount++;
      }
    }
  }
  if (deleteCount > 0) {
    // Ensure we add a new line is added after printing `.` for deleted files
    print(ansi.styleBold.wrap('\nDeleted files: $deleteCount'));
  }
}

const _globItems = {
  '**.dart',
  '**.dart.js.deps',
  '**.dart.js.tar.gz',
  '**.md',
  '**.module',
  '**.ng_placeholder', // Generated by pkg:angular
  '**.yaml',
  '.build.manifest',
  '.packages',
  'packages/\$sdk/**',
  'packages/analyzer/**',
  'packages/build_runner/**',
  'packages/build_web_compilers/**',
  'packages/node_preamble/**',
  'packages/package_resolver/**',
  'packages/test/**',
};

final _badFileGlob = Glob('{${_globItems.join(',')}}');
